# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
# Setzen des Working Directory
setwd("C:/Users/Matthias/OneDrive/SV/Projekt")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
head(buche.data)
# Aufteilen des Datensatzes in Teildatensätze jedes einzelogen Autors
buche.data.bartelink = subset(buche.data, buche.data[,1] == "Bartelink") ## Verkleinern des Datensatzes
buche.data.heller = subset(buche.data, buche.data[,1] == "Heller")
buche.data.joosten = subset(buche.data, buche.data[,1] == "Joosten")
# Plots
par(mfrow = c(2, 3))
plot(log(buche.data$dbh), log(buche.data$biom),ylim = c(-5, 10))
plot(log(buche.data$age), log(buche.data$biom))
plot(log(buche.data$height), log(buche.data$biom))
plot(log(buche.data$hsl), log(buche.data$biom))
plot((buche.data$hsl), log(buche.data$biom))
plot((buche.data$author), log(buche.data$biom))
## Best subset selection
# 1. maximales Modell festlegen
# 2. alle Teilmodelle sind Kandidatenmodelle
# 3. Entscheidung basierend auf Mallow's Cp
# 4. Schätzer für SPSE = Cp * sigma2.max + n* sigma2.max
# leaps
require("leaps")
# bartelink
buche.bss.bartelink = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.bartelink, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
# summary(buche.bss.bartelink)
summary(buche.bss.bartelink)$cp
summary(buche.bss.bartelink)$which[11,] # Modell 11 liefert betragsmaessig besten CP-Wert (-0.08103549)
# heller
buche.bss.heller = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.heller, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
# summary(buche.bss.heller)
summary(buche.bss.heller)$cp
summary(buche.bss.heller)$which[12,] # Modell 12 liefert betragsmaessig besten CP-Wert (-0.5130457)
# joosten
buche.bss.joosten = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
# summary(buche.bss.joosten)
summary(buche.bss.joosten)$cp
summary(buche.bss.joosten)$which[22,] # Modell 22 liefert betragsmaessig besten CP-Wert (8.344969)
# Beste Modelle pro Autor
m.bartelink = lm(log(biom)~1+ I(log(dbh))+I(log(age)^2)+I(log(height))+I(log(height)^2), data = buche.data.bartelink)
m.heller = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age)^2)+I(log(height)), data = buche.data.heller)
m.joosten = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(height))+I(log(height)^2)+hsl+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten)
# Berechnen der Parameter fuer die Modelle
summary(m.bartelink)
summary(m.heller)
summary(m.joosten)
# bartelink
buche.bss.bartelink = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.bartelink, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
# Berechnen der Parameter fuer die Modelle
summary(m.bartelink)
summary(m.heller)
summary(m.joosten)
# Setzen des Working Directory
setwd("C:/Users/Matthias/OneDrive/SV/Projekt")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
head(buche.data)
# leaps
require("leaps")
buche.bss = regsubsets(log(biom)~(1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2))*as.factor(author), data = buche.data, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
# summary(buche.bss)
summary(buche.bss)$cp
summary(buche.bss)$which[22,] # Modell 22 liefert betragsmaessig besten CP-Wert (4.248051)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
# m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Joosten+I(log(height)):as.factor(author)Joosten+I(log(height)^2):as.factor(author)Joosten+I(hsl^2):as.factor(author)Joosten, data = buche.data)
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)+I(log(height)):as.factor(author)+I(log(height)^2):as.factor(author)+I(hsl^2):as.factor(author), data = buche.data)
# Berechnen der Parameter fuer die Modelle
summary(m)
levels(author)
levels(as.factor(author))
levels(buche.data$author)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
# m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Joosten+I(log(height)):as.factor(author)Joosten+I(log(height)^2):as.factor(author)Joosten+I(hsl^2):as.factor(author)Joosten, data = buche.data)
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author, exclude = "Heller")+I(log(height)):as.factor(author)+I(log(height)^2):as.factor(author)+I(hsl^2):as.factor(author), data = buche.data)
levels(buche.data$author)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
# m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Joosten+I(log(height)):as.factor(author)Joosten+I(log(height)^2):as.factor(author)Joosten+I(hsl^2):as.factor(author)Joosten, data = buche.data)
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Heller+I(log(height)):as.factor(author)+I(log(height)^2):as.factor(author)+I(hsl^2):as.factor(author), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
# m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Joosten+I(log(height)):as.factor(author)Joosten+I(log(height)^2):as.factor(author)Joosten+I(hsl^2):as.factor(author)Joosten, data = buche.data)
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)+I(log(height)):as.factor(author)+I(log(height)^2):as.factor(author)+I(hsl^2):as.factor(author), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
# m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Joosten+I(log(height)):as.factor(author)Joosten+I(log(height)^2):as.factor(author)Joosten+I(hsl^2):as.factor(author)Joosten, data = buche.data)
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author)+I(log(height)^2):as.factor(author)+I(hsl^2):as.factor(author), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
# m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Joosten+I(log(height)):as.factor(author)Joosten+I(log(height)^2):as.factor(author)Joosten+I(hsl^2):as.factor(author)Joosten, data = buche.data)
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten"), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
# m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Joosten+I(log(height)):as.factor(author)Joosten+I(log(height)^2):as.factor(author)Joosten+I(hsl^2):as.factor(author)Joosten, data = buche.data)
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten"), data = buche.data)
# Berechnen der Parameter fuer die Modelle
summary(m)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
# m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author)Joosten+I(log(height)):as.factor(author)Joosten+I(log(height)^2):as.factor(author)Joosten+I(hsl^2):as.factor(author)Joosten, data = buche.data)
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten"), data = buche.data)
# Berechnen der Parameter fuer die Modelle
summary(m)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten", exclude = FALSE), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten", TRUE), data = buche.data)
View(buche.data)
View(buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor((author=="Joosten")==TRUE), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor((author=="Joosten"), levels = TRUE, data = buche.data)
# Berechnen der Parameter fuer die Modelle
summary(m)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor((author=="Joosten"), levels = TRUE, data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor((author=="Joosten", levels = TRUE), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten", levels = TRUE), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten", nmax = 1), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten", nmax = 1), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(author=="Joosten", labels = TRUE), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(levels = (author=="Joosten"), labels = TRUE), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(x = (author=="Joosten"), labels = TRUE), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(x = (author=="Joosten"), lavels = TRUE), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor(x = (author=="Joosten"), lavels = "TRUE"), data = buche.data)
# Bestes Modell mit Autor als kategorielle Einflussgroesse
m = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+as.factor(author=="Joosten")+I(log(height)):as.factor(author=="Joosten")+I(log(height)^2):as.factor(author=="Joosten")+I(hsl^2):as.factor((author=="Joosten")), data = buche.data)
# Berechnen der Parameter fuer die Modelle
summary(m)
setwd("C:/Users/Matthias/OneDrive/SV/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Setzen des Working Directory
# setwd("~/Documents/Master Data Science/Statistische Verfahren/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
# Setzen des Working Directory
# setwd("~/Documents/Master Data Science/Statistische Verfahren/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
head(buche.data)
# Seed für den Random Number Generator
set.seed(0)
# Setzen des Working Directory
# setwd("~/Documents/Master Data Science/Statistische Verfahren/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
head(buche.data)
# Seed für den Random Number Generator
set.seed(0)
# Aufteilen des Datensatzes in Teildatensätze jedes einzelogen Autors
buche.data.joosten = subset(buche.data, buche.data[,1] == "Joosten")
## leaps
require("leaps")
# joosten
buche.bss.joosten = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
summary(buche.bss.joosten)
summary(buche.bss.joosten)$cp
# Setzen des Working Directory
# setwd("~/Documents/Master Data Science/Statistische Verfahren/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
head(buche.data)
# Seed für den Random Number Generator
set.seed(0)
# Aufteilen des Datensatzes in Teildatensätze jedes einzelogen Autors
buche.data.joosten = subset(buche.data, buche.data[,1] == "Joosten")
## leaps
require("leaps")
# joosten
buche.bss.joosten = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
summary(buche.bss.joosten)$cp
summary(buche.bss.joosten)$which[22,] # Modell 22 liefert betragsmäßig besten CP-Wert (8.344969)
m.joosten = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(height))+I(log(height)^2)+hsl+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten)
## Simulation
# Genutzter Datensatz und Anzal der Outputs für Kreuzvalidierung
buche.data.used = buche.data.joosten
cross.length.out = 3082
# Anzahl der Beobachtungen für den gewählten Datensatz
numberObs = nrow(buche.data.used)
## Kreuzalidierung
index = rep(1:numberObs, length.out = cross.length.out)
index = sample(1:numberObs, cross.length.out, replace=T)
table(index)
setwd("C:/Users/Matthias/OneDrive/SV")
ozon.data = read.csv("ozone.csv", sep=",")
## Kreuzalidierung
index = rep(1:10, length.out = cross.length.out)
index = sample(index)
table(index)
## Kreuzalidierung
index = rep(1:10, length.out = cross.length.out)
# Setzen des Working Directory
# setwd("~/Documents/Master Data Science/Statistische Verfahren/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
head(buche.data)
# Seed für den Random Number Generator
set.seed(0)
# Aufteilen des Datensatzes in Teildatensätze jedes einzelogen Autors
buche.data.joosten = subset(buche.data, buche.data[,1] == "Joosten")
## leaps
require("leaps")
# joosten
buche.bss.joosten = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
summary(buche.bss.joosten)$cp
setwd("C:/Users/Matthias/OneDrive/SV/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Setzen des Working Directory
# setwd("~/Documents/Master Data Science/Statistische Verfahren/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
head(buche.data)
# Seed für den Random Number Generator
set.seed(0)
# Aufteilen des Datensatzes in Teildatensätze jedes einzelogen Autors
buche.data.joosten = subset(buche.data, buche.data[,1] == "Joosten")
## leaps
require("leaps")
# joosten
buche.bss.joosten = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
summary(buche.bss.joosten)$cp
summary(buche.bss.joosten)$which[22,] # Modell 22 liefert betragsmäßig besten CP-Wert (8.344969)
m.joosten = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(height))+I(log(height)^2)+hsl+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten)
## Simulation
# Genutzter Datensatz und Anzal der Outputs für Kreuzvalidierung
buche.data.used = buche.data.joosten
# Anzahl der Beobachtungen für den gewählten Datensatz
numberObs = nrow(buche.data.used)
cross.length.out = numberObs
## Kreuzalidierung
index = rep(1:10, length.out = cross.length.out)
index = sample(index)
table(index)
## Kreuzalidierung
index = rep(1:10, length.out = cross.length.out)
index = sample(index)
# Initialisierung
SPSE1 =SPSE2 =SPSE3 =SPSE4 =SPSE5 =SPSE6 =SPSE7=SPSE8 =0
index = sample(index)
i = c(1,2) #80 % Trainingsdaten
## Zerlegung
buche.test= buche.data.used[index %in% i,]
buche.train= buche.data.used[!(index %in% i),]
## Parameterschaetzung
m.joosten
# Initialisierung
SPSE = c(1:4)
for(m in 2:5){
for(j in 1:100){
index = sample(index)
i = c(1:m)
## Zerlegung
buche.test= buche.data.used[index %in% i,]
buche.train= buche.data.used[!(index %in% i),]
## Parameterschaetzung
m.joosten = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(height))+I(log(height)^2)+hsl+I(log(hsl))+I(log(hsl)^2), data = buche.train)
## Prognosefehler
SPSE[m-1] = SPSE[m-1] + sum((log(buche.test$biom)-predict(m.joosten, newdata=buche.test))^2)
}
}
## Kreuzalidierung
index = rep(1:10, length.out = cross.length.out)
for(m in 2:5){
for(j in 1:100){
index = sample(index)
i = c(1:m)
## Zerlegung
buche.test= buche.data.used[index %in% i,]
buche.train= buche.data.used[!(index %in% i),]
## Parameterschaetzung
m.joosten = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(height))+I(log(height)^2)+hsl+I(log(hsl))+I(log(hsl)^2), data = buche.train)
## Prognosefehler
SPSE[m-1] = SPSE[m-1] + sum((log(buche.test$biom)-predict(m.joosten, newdata=buche.test))^2)
}
}
# Setzen des Working Directory
# setwd("~/Documents/Master Data Science/Statistische Verfahren/Projekt/Statistische-Verfahren--Projekt-4.1-Buche/Aufgabenstellung")
# Laden der Daten aus CSV
buche.data = read.csv("buche.csv", sep=",")
head(buche.data)
# Seed für den Random Number Generator
set.seed(0)
# Aufteilen des Datensatzes in Teildatensätze jedes einzelogen Autors
buche.data.joosten = subset(buche.data, buche.data[,1] == "Joosten")
## leaps
require("leaps")
# joosten
buche.bss.joosten = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(age)^2)+I(log(height))+I(log(height)^2)+hsl+I(hsl^2)+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
summary(buche.bss.joosten)$cp
summary(buche.bss.joosten)$which[22,] # Modell 22 liefert betragsmäßig besten CP-Wert (8.344969)
m.joosten = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(height))+I(log(height)^2)+hsl+I(log(hsl))+I(log(hsl)^2), data = buche.data.joosten)
## Simulation
# Genutzter Datensatz und Anzal der Outputs für Kreuzvalidierung
buche.data.used = buche.data.joosten
# Anzahl der Beobachtungen für den gewählten Datensatz
numberObs = nrow(buche.data.used)
cross.length.out = numberObs
# Initialisierung
SPSE = c(1:4)
## Kreuzalidierung
index = rep(1:10, length.out = cross.length.out)
for(m in 2:5){
for(j in 1:100){
index = sample(index)
i = c(1:m)
## Zerlegung
buche.test= buche.data.used[index %in% i,]
buche.train= buche.data.used[!(index %in% i),]
## Parameterschaetzung
m.joosten = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(height))+I(log(height)^2)+hsl+I(log(hsl))+I(log(hsl)^2), data = buche.train)
## Prognosefehler
SPSE[m-1] = SPSE[m-1] + sum((log(buche.test$biom)-predict(m.joosten, newdata=buche.test))^2)
}
}
## Schätzung auf Grund von RSS
m.joosten = lm(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(age))+I(log(height))+I(log(height)^2)+hsl+I(log(hsl))+I(log(hsl)^2), data = buche.test)
RSS = sum(residuals(m.joosten)^2)
summary(m.joosten)
sigma2.max = RSS/(cross.length.out-9) # Wie wird sigma2.max berechnet? woher kam bei aufgabe 8 die -19? Number of coefficients in max model?
SPSE1 = RSS1 + 2*sigma2.max*length(coef(m1))
SPSE1 = RSS + 2*sigma2.max*length(coef(m1))
SPSE1 = RSS + 2*sigma2.max*length(coef(m.joosten))
c(SPSE1 ,SPSE2 ,SPSE3 ,SPSE4)
## leaps
require("leaps")
buche.bss = regsubsets(log(biom)~1+ I(log(dbh))+I(log(dbh)^2)+I(log(height))+I(log(height)^2)+I(log(age))+hsl, data = buche.data.used, nbest = 3) ## nbest = 3, jeweils die drei besten Modelle gleicher Parameterzahl
summary(buche.bss)
summary(buche.bss)$cp
summary(buche.bss)$which[7,]
summary(buche.bss)$cp*sigma2.max + cross.length.out* sigma2.max
